{"version":3,"sources":["../../../src/services/organisations/organisations.service.js"],"names":["servicesPath","join","__dirname","modelsPath","debug","createOrganisationServices","organisation","organisationDb","app","db","instance","_id","toString","createService","path","proxy","service","getService","params","query","name","configureOrganisations","find","paginate","then","organisations","forEach"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AACA,IAAMA,eAAe,eAAKC,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,IAA3B,EAAiC,UAAjC,CAArB;AACA,IAAMC,aAAa,eAAKF,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,IAA3B,EAAiC,QAAjC,CAAnB;;AAEA,IAAME,QAAQ,qBAAU,4BAAV,CAAd;;kBAEe;AAEbC,4BAFa,sCAEeC,YAFf,EAE6B;AACxC,QAAIC,iBAAiB,KAAKC,GAAL,CAASC,EAAT,CAAYC,QAAZ,CAAqBD,EAArB,CAAwBH,aAAaK,GAAb,CAAiBC,QAAjB,EAAxB,CAArB;AACA,SAAKJ,GAAL,CAASK,aAAT,CAAuB,OAAvB,EAAgC;AAC9Bb,gCAD8B;AAE9Bc,YAAMR,aAAaK,GAAb,CAAiBC,QAAjB,KAA8B,QAFN;AAG9BG,aAAO;AACLC,iBAAS,KAAKR,GAAL,CAASS,UAAT,CAAoB,OAApB,CADJ;AAELC,gBAAQ,EAAEC,OAAO,EAAE,qBAAqBb,aAAaK,GAAb,CAAiBC,QAAjB,EAAvB,EAAT;AAFH;AAHuB,KAAhC;AAQAR,UAAM,4CAA4CE,aAAac,IAA/D;AACA,SAAKZ,GAAL,CAASK,aAAT,CAAuB,QAAvB,EAAiC;AAC/BV,4BAD+B;AAE/BH,gCAF+B;AAG/Bc,YAAMR,aAAaK,GAAb,CAAiBC,QAAjB,KAA8B,SAHL;AAI/BH,UAAIF;AAJ2B,KAAjC;AAMAH,UAAM,6CAA6CE,aAAac,IAAhE;AACD,GApBY;AAsBbC,wBAtBa,oCAsBa;AAAA;;AACxB;AACA,WAAO,KAAKC,IAAL,CAAU,EAAEC,UAAU,KAAZ,EAAV,EACNC,IADM,CACD,yBAAiB;AACrBC,oBAAcC,OAAd,CAAsB;AAAA,eAAgB,MAAKrB,0BAAL,CAAgCC,YAAhC,CAAhB;AAAA,OAAtB;AACD,KAHM,CAAP;AAID;AA5BY,C","file":"organisations.service.js","sourcesContent":["import path from 'path'\r\nimport makeDebug from 'debug'\r\nconst servicesPath = path.join(__dirname, '..', '..', 'services')\r\nconst modelsPath = path.join(__dirname, '..', '..', 'models')\r\n\r\nconst debug = makeDebug('kaelia:kTeam:organisations')\r\n\r\nexport default {\r\n\r\n  createOrganisationServices (organisation) {\r\n    let organisationDb = this.app.db.instance.db(organisation._id.toString())\r\n    this.app.createService('users', {\r\n      servicesPath,\r\n      path: organisation._id.toString() + '/users',\r\n      proxy: {\r\n        service: this.app.getService('users'),\r\n        params: { query: { 'organisations._id': organisation._id.toString() } }\r\n      }\r\n    })\r\n    debug('Users service created for organisation ' + organisation.name)\r\n    this.app.createService('groups', {\r\n      modelsPath,\r\n      servicesPath,\r\n      path: organisation._id.toString() + '/groups',\r\n      db: organisationDb\r\n    })\r\n    debug('Groups service created for organisation ' + organisation.name)\r\n  },\r\n\r\n  configureOrganisations () {\r\n    // Reinstanciated services for all organisations\r\n    return this.find({ paginate: false })\r\n    .then(organisations => {\r\n      organisations.forEach(organisation => this.createOrganisationServices(organisation))\r\n    })\r\n  }\r\n}\r\n"]}