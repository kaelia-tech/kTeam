{"version":3,"sources":["../../../src/services/authorisations/authorisations.service.js"],"names":["debug","ANONYMOUS_USER","findResource","scope","query","results","length","create","data","params","scopeName","Promise","all","subjects","map","get","subject","resource","_id","toString","name","push","permissions","set","updateAbilitiesForSubject","subjectsService","patch","user","then","remove","id","filter","setup","app","config","cache","maxUsers","getAbilitiesForSubject","has","abilities","del"],"mappings":"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","file":"authorisations.service.js","sourcesContent":["import _ from 'lodash'\r\nimport sift from 'sift'\r\nimport LruCache from 'lru-cache'\r\nimport makeDebug from 'debug'\r\nimport { defineAbilitiesForSubject } from '../../permissions'\r\n\r\nconst debug = makeDebug('kaelia:kTeam:authorisation')\r\n\r\n// Global key to store abilities in cache for anonymous users\r\nconst ANONYMOUS_USER = 'anonymous'\r\n\r\n// Util function to look for a given resource in a scope\r\nfunction findResource (scope, query) {\r\n  let results = sift(query, scope)\r\n  return results.length > 0 ? results[0] : null\r\n}\r\n\r\nexport default {\r\n  // Used to change permissions for a subject on a resource\r\n  // We pass parameters in the query/data object\r\n  // The params object should be already filled by populate hooks\r\n  create (data, params) {\r\n    let query = params.query\r\n    // Make hook usable with query params as well\r\n    let scopeName = data.scope || query.scope // Get scope name first\r\n    return Promise.all(params.subjects.map(subject => {\r\n      // Then retrieve the right scope on the subject\r\n      let scope = _.get(subject, scopeName, [])\r\n      // Then the target resource\r\n      let resource = findResource(scope, { _id: params.resource._id.toString() })\r\n      // On first authorisation create the resource in scope\r\n      if (!resource) {\r\n        resource = {\r\n          name: params.resource.name,\r\n          _id: params.resource._id.toString()\r\n        }\r\n        scope.push(resource)\r\n      }\r\n      // Hooks should have populate subject/resource,\r\n      // now we have to set permissions on the given subject's scope\r\n      resource.permissions = data.permissions || query.permissions\r\n      // This cover the case when we create the scope on the first auth,\r\n      // so that if the caller want to get back the update subject he can have it\r\n      _.set(subject, scopeName, scope)\r\n      this.updateAbilitiesForSubject(subject)\r\n      return params.subjectsService.patch(subject._id, {\r\n        [scopeName]: scope\r\n      }, {\r\n        user: params.user\r\n      })\r\n      .then(subject => {\r\n        debug('Authorisation ' + data.permissions + ' set for subject ' + subject._id + ' on resource ' + params.resource._id + ' with scope ' + scopeName)\r\n      })\r\n    }))\r\n  },\r\n\r\n  // Used to remove permissions for a subject on a resource\r\n  // We use ID as target resource and pass parameters in the query object\r\n  // The params object should be already filled by populate hooks\r\n  remove (id, params) {\r\n    let query = params.query\r\n    let scopeName = query.scope // Get scope name first\r\n    return Promise.all(params.subjects.map(subject => {\r\n      // Then retrieve the right scope on the subject\r\n      let scope = _.get(subject, scopeName, [])\r\n      // Then the target resource\r\n      scope.filter(sift({ _id: id }))\r\n      // This cover the case when we create the scope on the first auth,\r\n      // so that if the caller want to get back the update subject he can have it\r\n      _.set(subject, scopeName, scope)\r\n      this.updateAbilitiesForSubject(subject)\r\n      return params.subjectsService.patch(subject._id, {\r\n        [scopeName]: scope\r\n      }, {\r\n        user: params.user\r\n      })\r\n      .then(subject => {\r\n        debug('Authorisation unset for subject ' + subject._id + ' on resource ' + id + ' with scope ' + scopeName)\r\n      })\r\n    }))\r\n  },\r\n\r\n  setup (app) {\r\n    const config = app.get('authorisation')\r\n    if (config.cache) {\r\n      // Store abilities of the N most active users in LRU cache (defaults to 1000)\r\n      this.cache = new LruCache(config.cache.maxUsers || 1000)\r\n      debug('Using LRU cache for user abilities')\r\n    } else {\r\n      debug('Do not use LRU cache for user abilities')\r\n    }\r\n  },\r\n\r\n  // Compute abilities for a given user and set it in cache the first time\r\n  // or get it from cache if found\r\n  getAbilitiesForSubject (subject) {\r\n    if (this.cache) {\r\n      if (subject) {\r\n        if (this.cache.has(subject._id.toString())) return this.cache.get(subject._id.toString())\r\n      } else {\r\n        if (this.cache.has(ANONYMOUS_USER)) return this.cache.get(ANONYMOUS_USER)\r\n      }\r\n    }\r\n\r\n    let abilities = defineAbilitiesForSubject(subject)\r\n\r\n    if (this.cache) {\r\n      if (subject) {\r\n        this.cache.set(subject._id.toString(), abilities)\r\n      } else {\r\n        this.cache.set(ANONYMOUS_USER, abilities)\r\n      }\r\n    }\r\n\r\n    return abilities\r\n  },\r\n\r\n  // Compute abilities for a given user and update it in cache\r\n  updateAbilitiesForSubject (subject) {\r\n    if (this.cache) {\r\n      if (subject) {\r\n        this.cache.del(subject._id.toString())\r\n      } else {\r\n        this.cache.del(ANONYMOUS_USER)\r\n      }\r\n    }\r\n\r\n    return this.getAbilitiesForSubject(subject)\r\n  }\r\n}\r\n"]}