{"version":3,"sources":["../../../src/client/mixins/mixin.authorisation.js"],"names":["authorisationMixin","methods","hasAbilities","action","resource","serviceName","abilities","get","updateAbilities","user","set","debug","rules","mounted","$on"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;AACA;;;;AAEA,IAAIA,qBAAqB;AACvBC,WAAS;AACPC,gBADO,wBACOC,MADP,EACeC,QADf,EACyBC,WADzB,EACsC;AAC3C,UAAMC,YAAY,cAAMC,GAAN,CAAU,gBAAV,EAA4B,IAA5B,CAAlB;AACA,UAAID,SAAJ,EAAe;AACb,eAAO,+BAAaA,SAAb,EAAwBH,MAAxB,EAAgCC,QAAhC,EAA0CC,WAA1C,CAAP;AACD;AACD,aAAO,KAAP;AACD,KAPM;AAQPG,mBARO,6BAQY;AACjB,UAAMC,OAAO,cAAMF,GAAN,CAAU,MAAV,EAAkB,IAAlB,CAAb;AACA,UAAID,YAAY,IAAhB;AACA,UAAIG,IAAJ,EAAU;AACRH,oBAAY,4CAA0BG,IAA1B,CAAZ;AACA,sBAAMC,GAAN,CAAU,gBAAV,EAA4BJ,SAA5B;AACD;AACD,UAAIA,SAAJ,EAAe;AACb,2BAAOK,KAAP,CAAa,sBAAb,EAAqCL,UAAUM,KAA/C;AACD;AACD,aAAON,SAAP;AACD;AAnBM,GADc;AAsBvBO,SAtBuB,qBAsBZ;AAAA;;AACT;AACA,QAAIP,YAAY,cAAMC,GAAN,CAAU,gBAAV,EAA4B,IAA5B,CAAhB;AACA,QAAI,CAACD,SAAL,EAAgB;AACd;AACA,WAAKE,eAAL;AACD;AACD;AACA,mBAAOM,GAAP,CAAW,cAAX,EAA2B;AAAA,aAAQ,MAAKN,eAAL,EAAR;AAAA,KAA3B;AACD;AA/BsB,CAAzB;;AAkCA,cAAME,GAAN,CAAU,sBAAV,EAAkCV,kBAAlC;;kBAEeA,kB","file":"mixin.authorisation.js","sourcesContent":["import logger from 'loglevel'\r\nimport { Events } from 'quasar'\r\nimport { Store } from 'kCore/client'\r\nimport { defineAbilitiesForSubject, hasAbilities } from '../../permissions'\r\n\r\nlet authorisationMixin = {\r\n  methods: {\r\n    hasAbilities (action, resource, serviceName) {\r\n      const abilities = Store.get('user.abilities', null)\r\n      if (abilities) {\r\n        return hasAbilities(abilities, action, resource, serviceName)\r\n      }\r\n      return false\r\n    },\r\n    updateAbilities () {\r\n      const user = Store.get('user', null)\r\n      let abilities = null\r\n      if (user) {\r\n        abilities = defineAbilitiesForSubject(user)\r\n        Store.set('user.abilities', abilities)\r\n      }\r\n      if (abilities) {\r\n        logger.debug('New user abilities: ', abilities.rules)\r\n      }\r\n      return abilities\r\n    }\r\n  },\r\n  mounted () {\r\n    // Check if abilities are already computed\r\n    let abilities = Store.get('user.abilities', null)\r\n    if (!abilities) {\r\n      // Otherwise try to compute them\r\n      this.updateAbilities()\r\n    }\r\n    // Whenever the user is updated, update abilities as well\r\n    Events.$on('user-changed', user => this.updateAbilities())\r\n  }\r\n}\r\n\r\nStore.set('mixins.authorisation', authorisationMixin)\r\n\r\nexport default authorisationMixin\r\n"]}