{"version":3,"sources":["../../src/hooks/groups.js"],"names":["createGroupAuthorisations","removeGroupAuthorisations","debug","hook","app","authorisationService","getService","userService","create","scope","permissions","user","params","subjects","subjectsService","resource","result","resourcesService","service","then","_id","remove","toString","query","organisation"],"mappings":";;;;;QAGgBA,yB,GAAAA,yB;QAuBAC,yB,GAAAA,yB;;AA1BhB;;;;;;AACA,IAAMC,QAAQ,qBAAU,cAAV,CAAd;;AAEO,SAASF,yBAAT,CAAoCG,IAApC,EAA0C;AAC/C,MAAIC,MAAMD,KAAKC,GAAf;AACA,MAAIC,uBAAuBD,IAAIE,UAAJ,CAAe,gBAAf,CAA3B;AACA,MAAIC,cAAcH,IAAIE,UAAJ,CAAe,OAAf,CAAlB;;AAEA;AACA,SAAOD,qBAAqBG,MAArB,CAA4B;AACjCC,WAAO,QAD0B;AAEjCC,iBAAa;AAFoB,GAA5B,EAGJ;AACDC,UAAMR,KAAKS,MAAL,CAAYD,IADjB;AAED;AACAE,cAAU,CAACV,KAAKS,MAAL,CAAYD,IAAb,CAHT;AAIDG,qBAAiBP,WAJhB;AAKDQ,cAAUZ,KAAKa,MALd;AAMDC,sBAAkBd,KAAKe;AANtB,GAHI,EAWNC,IAXM,CAWD,yBAAiB;AACrBjB,UAAM,kCAAkCC,KAAKa,MAAL,CAAYI,GAApD;AACA,WAAOjB,IAAP;AACD,GAdM,CAAP;AAeD;;AAEM,SAASF,yBAAT,CAAoCE,IAApC,EAA0C;AAC/C,MAAIC,MAAMD,KAAKC,GAAf;AACA,MAAIC,uBAAuBD,IAAIE,UAAJ,CAAe,gBAAf,CAA3B;;AAEA;AACA,SAAOD,qBAAqBgB,MAArB,CAA4BlB,KAAKa,MAAL,CAAYI,GAAZ,CAAgBE,QAAhB,EAA5B,EAAwD;AAC7DC,WAAO;AACLT,uBAAiBX,KAAKa,MAAL,CAAYQ,YAAZ,CAAyBF,QAAzB,KAAsC,QADlD;AAELb,aAAO;AAFF,KADsD;AAK7DE,UAAMR,KAAKS,MAAL,CAAYD;AAL2C,GAAxD,EAONQ,IAPM,CAOD,yBAAiB;AACrBjB,UAAM,oCAAoCC,KAAKa,MAAL,CAAYI,GAAtD;AACA,WAAOjB,IAAP;AACD,GAVM,CAAP;AAWD","file":"groups.js","sourcesContent":["import makeDebug from 'debug'\r\nconst debug = makeDebug('kaelia:kTeam')\r\n\r\nexport function createGroupAuthorisations (hook) {\r\n  let app = hook.app\r\n  let authorisationService = app.getService('authorisations')\r\n  let userService = app.getService('users')\r\n\r\n  // Set membership for the owner\r\n  return authorisationService.create({\r\n    scope: 'groups',\r\n    permissions: 'owner'\r\n  }, {\r\n    user: hook.params.user,\r\n    // Because we already have subject/resource set it as objects to avoid populating\r\n    subjects: [hook.params.user],\r\n    subjectsService: userService,\r\n    resource: hook.result,\r\n    resourcesService: hook.service\r\n  })\r\n  .then(authorisation => {\r\n    debug('Group ownership set for user ' + hook.result._id)\r\n    return hook\r\n  })\r\n}\r\n\r\nexport function removeGroupAuthorisations (hook) {\r\n  let app = hook.app\r\n  let authorisationService = app.getService('authorisations')\r\n\r\n  // Unset membership for the all org users\r\n  return authorisationService.remove(hook.result._id.toString(), {\r\n    query: {\r\n      subjectsService: hook.result.organisation.toString() + '/users',\r\n      scope: 'groups'\r\n    },\r\n    user: hook.params.user\r\n  })\r\n  .then(authorisation => {\r\n    debug('Authorisations unset for group ' + hook.result._id)\r\n    return hook\r\n  })\r\n}\r\n"]}