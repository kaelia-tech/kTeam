{"version":3,"sources":["../../src/hooks/authorisations.js"],"names":["populateSubjects","populateResource","authorise","debug","hook","type","Error","populateObjects","populateObject","params","checkAuthorisation","provider","authorised","Promise","resolve","action","method","serviceName","service","name","authorisationService","app","getService","abilities","getAbilitiesForSubject","user","rules","id","data","rulesFor","query","get","then","resource","result"],"mappings":"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","file":"authorisations.js","sourcesContent":["import { merge } from 'feathers-commons'\r\nimport { Forbidden } from 'feathers-errors'\r\nimport { toMongoQuery } from 'casl'\r\nimport { hooks } from 'kCore'\r\nimport { hasAbilities } from '../permissions'\r\nimport makeDebug from 'debug'\r\n\r\nconst debug = makeDebug('kalisio:kTeam:authorisation')\r\n\r\nexport function populateSubjects (hook) {\r\n  if (hook.type !== 'before') {\r\n    throw new Error(`The 'populateSubjects' hook should only be used as a 'before' hook.`)\r\n  }\r\n\r\n  return hooks.populateObjects('subjectsService', 'subjects')(hook)\r\n}\r\n\r\nexport function populateResource (hook) {\r\n  if (hook.type !== 'before') {\r\n    throw new Error(`The 'populateResource' hook should only be used as a 'before' hook.`)\r\n  }\r\n\r\n  return hooks.populateObject('resourcesService', 'resource')(hook)\r\n}\r\n\r\nexport function authorise (hook) {\r\n  if (hook.type !== 'before') {\r\n    throw new Error(`The 'authorise' hook should only be used as a 'before' hook.`)\r\n  }\r\n\r\n  // If called internally we skip authorisation unless explicitely asked for\r\n  if (!hook.params.checkAuthorisation && (!hook.params.provider || hook.params.authorised)) {\r\n    return Promise.resolve(hook)\r\n  }\r\n\r\n  const action = hook.method\r\n  const serviceName = hook.service.name\r\n  // Build ability for user\r\n  let authorisationService = hook.app.getService('authorisations')\r\n  const abilities = authorisationService.getAbilitiesForSubject(hook.params.user)\r\n  hook.params.abilities = abilities\r\n\r\n  debug('User is ', hook.params.user)\r\n  debug('User abilities are ', abilities.rules)\r\n\r\n  if (!hook.id) {\r\n    // In this specific case there is no query to be run,\r\n    // simply check against the object we'd like to create\r\n    if (action === 'create') {\r\n      debug('Target resource is ', hook.data)\r\n      if (!hasAbilities(abilities, action, hook.data, serviceName)) {\r\n        throw new Forbidden(`You are not allowed to perform ${action} action on service ${serviceName}`)\r\n      }\r\n    } else {\r\n      // When we find/update/patch/remove multiple items this ensures thet\r\n      // only the ones authorised by constraints on the resources will be fetched\r\n      // This avoid fetching all first then check it one by one\r\n      const rules = abilities.rulesFor(action, serviceName)\r\n      debug('Target resource rules are ', rules)\r\n      merge(hook.params.query, toMongoQuery(rules))\r\n    }\r\n  // Some specific services might not expose a get function, in this case we can check for authorisation\r\n  // this has to be implemented by the service itself\r\n  } else if (typeof hook.service.get === 'function') {\r\n    // In this case (single get/update/patch) we need to fetch the item first\r\n    // Bypass authorisation otherwise we will loop infinitely\r\n    hook.params.checkAuthorisation = false\r\n    return hook.service.get(hook.id, hook.params)\r\n    .then(resource => {\r\n      debug('Target resource is ', resource)\r\n      // Then check against the object we'd like to manage\r\n      if (!hasAbilities(abilities, action, resource, serviceName)) {\r\n        throw new Forbidden(`You are not allowed to perform ${action} action on service ${serviceName}`)\r\n      }\r\n      // Avoid fetching again the object in this case\r\n      if (action === 'get') {\r\n        hook.result = resource\r\n      }\r\n      hook.params.authorised = true\r\n      return hook\r\n    })\r\n  }\r\n\r\n  hook.params.authorised = true\r\n  return Promise.resolve(hook)\r\n}\r\n"]}