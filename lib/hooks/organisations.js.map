{"version":3,"sources":["../../src/hooks/organisations.js"],"names":["createOrganisationServices","removeOrganisationServices","createOrganisationAuthorisations","removeOrganisationAuthorisations","createPrivateOrganisation","removePrivateOrganisation","debug","servicesPath","join","__dirname","modelsPath","hook","app","databaseService","getService","create","name","result","_id","toString","user","params","then","organisationDb","db","instance","createService","path","proxy","service","query","remove","authorisationService","userService","scope","permissions","subjects","subjectsService","resource","resourcesService","organisationService"],"mappings":";;;;;QAMgBA,0B,GAAAA,0B;QA+BAC,0B,GAAAA,0B;QAcAC,gC,GAAAA,gC;QAuBAC,gC,GAAAA,gC;QAkBAC,yB,GAAAA,yB;QAgBAC,yB,GAAAA,yB;;AA5GhB;;;;AACA;;;;;;AACA,IAAMC,QAAQ,qBAAU,cAAV,CAAd;AACA,IAAMC,eAAe,eAAKC,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,UAA3B,CAArB;AACA,IAAMC,aAAa,eAAKF,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,QAA3B,CAAnB;;AAEO,SAAST,0BAAT,CAAqCW,IAArC,EAA2C;AAChD,MAAIC,MAAMD,KAAKC,GAAf;AACA,MAAIC,kBAAkBD,IAAIE,UAAJ,CAAe,WAAf,CAAtB;;AAEA;AACA,SAAOD,gBAAgBE,MAAhB,CAAuB;AAC5BC,UAAML,KAAKM,MAAL,CAAYC,GAAZ,CAAgBC,QAAhB;AADsB,GAAvB,EAEJ;AACDC,UAAMT,KAAKU,MAAL,CAAYD;AADjB,GAFI,EAKNE,IALM,CAKD,cAAM;AACVhB,UAAM,iCAAiCK,KAAKM,MAAL,CAAYD,IAAnD;AACA,QAAIO,iBAAiBX,IAAIY,EAAJ,CAAOC,QAAP,CAAgBD,EAAhB,CAAmBb,KAAKM,MAAL,CAAYC,GAAZ,CAAgBC,QAAhB,EAAnB,CAArB;AACAP,QAAIc,aAAJ,CAAkB,OAAlB,EAA2B;AACzBnB,gCADyB;AAEzBoB,YAAMhB,KAAKM,MAAL,CAAYC,GAAZ,CAAgBC,QAAhB,KAA6B,QAFV;AAGzBS,aAAO;AACLC,iBAASjB,IAAIE,UAAJ,CAAe,OAAf,CADJ;AAELO,gBAAQ,EAAES,OAAO,EAAE,qBAAqBnB,KAAKM,MAAL,CAAYC,GAAZ,CAAgBC,QAAhB,EAAvB,EAAT;AAFH;AAHkB,KAA3B;AAQAP,QAAIc,aAAJ,CAAkB,QAAlB,EAA4B;AAC1BhB,4BAD0B;AAE1BH,gCAF0B;AAG1BoB,YAAMhB,KAAKM,MAAL,CAAYC,GAAZ,CAAgBC,QAAhB,KAA6B,SAHT;AAI1BK,UAAID;AAJsB,KAA5B;AAMA,WAAOZ,IAAP;AACD,GAvBM,CAAP;AAwBD;;AAEM,SAASV,0BAAT,CAAqCU,IAArC,EAA2C;AAChD,MAAIC,MAAMD,KAAKC,GAAf;AACA,MAAIC,kBAAkBD,IAAIE,UAAJ,CAAe,WAAf,CAAtB;;AAEA;AACA,SAAOD,gBAAgBkB,MAAhB,CAAuBpB,KAAKM,MAAL,CAAYC,GAAZ,CAAgBC,QAAhB,EAAvB,EAAmD;AACxDC,UAAMT,KAAKU,MAAL,CAAYD;AADsC,GAAnD,EAGNE,IAHM,CAGD,cAAM;AACVhB,UAAM,iCAAiCK,KAAKM,MAAL,CAAYD,IAAnD;AACA,WAAOL,IAAP;AACD,GANM,CAAP;AAOD;;AAEM,SAAST,gCAAT,CAA2CS,IAA3C,EAAiD;AACtD,MAAIC,MAAMD,KAAKC,GAAf;AACA,MAAIoB,uBAAuBpB,IAAIE,UAAJ,CAAe,gBAAf,CAA3B;AACA,MAAImB,cAAcrB,IAAIE,UAAJ,CAAe,OAAf,CAAlB;;AAEA;AACA,SAAOkB,qBAAqBjB,MAArB,CAA4B;AACjCmB,WAAO,eAD0B;AAEjCC,iBAAa,OAFoB,CAEZ;AAFY,GAA5B,EAGJ;AACDf,UAAMT,KAAKU,MAAL,CAAYD,IADjB;AAED;AACAgB,cAAU,CAACzB,KAAKU,MAAL,CAAYD,IAAb,CAHT;AAIDiB,qBAAiBJ,WAJhB;AAKDK,cAAU3B,KAAKM,MALd;AAMDsB,sBAAkB5B,KAAKkB;AANtB,GAHI,EAWNP,IAXM,CAWD,yBAAiB;AACrBhB,UAAM,yCAAyCK,KAAKM,MAAL,CAAYC,GAA3D;AACA,WAAOP,IAAP;AACD,GAdM,CAAP;AAeD;;AAEM,SAASR,gCAAT,CAA2CQ,IAA3C,EAAiD;AACtD,MAAIC,MAAMD,KAAKC,GAAf;AACA,MAAIoB,uBAAuBpB,IAAIE,UAAJ,CAAe,gBAAf,CAA3B;;AAEA;AACA,SAAOkB,qBAAqBD,MAArB,CAA4BpB,KAAKM,MAAL,CAAYC,GAAZ,CAAgBC,QAAhB,EAA5B,EAAwD;AAC7DW,WAAO;AACLO,uBAAiB1B,KAAKM,MAAL,CAAYC,GAAZ,CAAgBC,QAAhB,KAA6B,QADzC;AAELe,aAAO;AAFF,KADsD;AAK7Dd,UAAMT,KAAKU,MAAL,CAAYD;AAL2C,GAAxD,EAONE,IAPM,CAOD,yBAAiB;AACrBhB,UAAM,2CAA2CK,KAAKM,MAAL,CAAYC,GAA7D;AACA,WAAOP,IAAP;AACD,GAVM,CAAP;AAWD;;AAEM,SAASP,yBAAT,CAAoCO,IAApC,EAA0C;AAC/C,MAAIC,MAAMD,KAAKC,GAAf;AACA,MAAI4B,sBAAsB5B,IAAIE,UAAJ,CAAe,eAAf,CAA1B;;AAEA;AACA,SAAO0B,oBAAoBzB,MAApB,CAA2B;AAChCG,SAAKP,KAAKM,MAAL,CAAYC,GADe,EACV;AACtBF,UAAML,KAAKM,MAAL,CAAYD,IAFc,CAET;AAFS,GAA3B,EAGJ;AACDI,UAAMT,KAAKM;AADV,GAHI,EAMNK,IANM,CAMD,eAAO;AACXhB,UAAM,2CAA2CK,KAAKM,MAAL,CAAYC,GAA7D;AACD,GARM,CAAP;AASD;;AAEM,SAASb,yBAAT,CAAoCM,IAApC,EAA0C;AAC/C,MAAIC,MAAMD,KAAKC,GAAf;AACA,MAAI4B,sBAAsB5B,IAAIE,UAAJ,CAAe,eAAf,CAA1B;AACA;AACA,SAAO0B,oBAAoBT,MAApB,CAA2BpB,KAAKM,MAAL,CAAYC,GAAZ,CAAgBC,QAAhB,EAA3B,EAAuD;AAC5DC,UAAMT,KAAKM;AADiD,GAAvD,EAGNK,IAHM,CAGD,eAAO;AACXhB,UAAM,2CAA2CK,KAAKM,MAAL,CAAYC,GAA7D;AACD,GALM,CAAP;AAMD","file":"organisations.js","sourcesContent":["import path from 'path'\r\nimport makeDebug from 'debug'\r\nconst debug = makeDebug('kaelia:kTeam')\r\nconst servicesPath = path.join(__dirname, '..', 'services')\r\nconst modelsPath = path.join(__dirname, '..', 'models')\r\n\r\nexport function createOrganisationServices (hook) {\r\n  let app = hook.app\r\n  let databaseService = app.getService('databases')\r\n\r\n  // First we create the organisation DB\r\n  return databaseService.create({\r\n    name: hook.result._id.toString()\r\n  }, {\r\n    user: hook.params.user\r\n  })\r\n  .then(db => {\r\n    debug('DB created for organisation ' + hook.result.name)\r\n    let organisationDb = app.db.instance.db(hook.result._id.toString())\r\n    app.createService('users', {\r\n      servicesPath,\r\n      path: hook.result._id.toString() + '/users',\r\n      proxy: {\r\n        service: app.getService('users'),\r\n        params: { query: { 'organisations._id': hook.result._id.toString() } }\r\n      }\r\n    })\r\n    app.createService('groups', {\r\n      modelsPath,\r\n      servicesPath,\r\n      path: hook.result._id.toString() + '/groups',\r\n      db: organisationDb\r\n    })\r\n    return hook\r\n  })\r\n}\r\n\r\nexport function removeOrganisationServices (hook) {\r\n  let app = hook.app\r\n  let databaseService = app.getService('databases')\r\n\r\n  // Then we remove the organisation DB\r\n  return databaseService.remove(hook.result._id.toString(), {\r\n    user: hook.params.user\r\n  })\r\n  .then(db => {\r\n    debug('DB removed for organisation ' + hook.result.name)\r\n    return hook\r\n  })\r\n}\r\n\r\nexport function createOrganisationAuthorisations (hook) {\r\n  let app = hook.app\r\n  let authorisationService = app.getService('authorisations')\r\n  let userService = app.getService('users')\r\n\r\n  // Set membership for the owner\r\n  return authorisationService.create({\r\n    scope: 'organisations',\r\n    permissions: 'owner' // Owner by default\r\n  }, {\r\n    user: hook.params.user,\r\n    // Because we already have subject/resource set it as objects to avoid populating\r\n    subjects: [hook.params.user],\r\n    subjectsService: userService,\r\n    resource: hook.result,\r\n    resourcesService: hook.service\r\n  })\r\n  .then(authorisation => {\r\n    debug('Organisation ownership set for user ' + hook.result._id)\r\n    return hook\r\n  })\r\n}\r\n\r\nexport function removeOrganisationAuthorisations (hook) {\r\n  let app = hook.app\r\n  let authorisationService = app.getService('authorisations')\r\n\r\n  // Unset membership for the all org users\r\n  return authorisationService.remove(hook.result._id.toString(), {\r\n    query: {\r\n      subjectsService: hook.result._id.toString() + '/users',\r\n      scope: 'organisations'\r\n    },\r\n    user: hook.params.user\r\n  })\r\n  .then(authorisation => {\r\n    debug('Authorisations unset for organisation ' + hook.result._id)\r\n    return hook\r\n  })\r\n}\r\n\r\nexport function createPrivateOrganisation (hook) {\r\n  let app = hook.app\r\n  let organisationService = app.getService('organisations')\r\n\r\n  // Create a private organisation for the user\r\n  return organisationService.create({\r\n    _id: hook.result._id, // Same ID as user, fine because in another service\r\n    name: hook.result.name // Same name as user\r\n  }, {\r\n    user: hook.result\r\n  })\r\n  .then(org => {\r\n    debug('Private organisation created for user ' + hook.result._id)\r\n  })\r\n}\r\n\r\nexport function removePrivateOrganisation (hook) {\r\n  let app = hook.app\r\n  let organisationService = app.getService('organisations')\r\n  // Create a private organisation for the user\r\n  return organisationService.remove(hook.result._id.toString(), {\r\n    user: hook.result\r\n  })\r\n  .then(org => {\r\n    debug('Private organisation removed for user ' + hook.result._id)\r\n  })\r\n}\r\n"]}