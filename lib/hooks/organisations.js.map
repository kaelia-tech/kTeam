{"version":3,"sources":["../../src/hooks/organisations.js"],"names":["createOrganisationServices","removeOrganisationServices","createOrganisationAuthorisations","removeOrganisationAuthorisations","createPrivateOrganisation","removePrivateOrganisation","debug","hook","app","organisationService","service","databaseService","getService","create","name","result","_id","toString","user","params","then","remove","authorisationService","userService","scope","permissions","subjects","subjectsService","resource","resourcesService","query"],"mappings":"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","file":"organisations.js","sourcesContent":["import makeDebug from 'debug'\r\nconst debug = makeDebug('kalisio:kTeam')\r\n\r\nexport function createOrganisationServices (hook) {\r\n  let app = hook.app\r\n  let organisationService = hook.service\r\n  let databaseService = app.getService('databases')\r\n\r\n  // First we create the organisation DB\r\n  return databaseService.create({\r\n    name: hook.result._id.toString()\r\n  }, {\r\n    user: hook.params.user\r\n  })\r\n  .then(db => {\r\n    debug('DB created for organisation ' + hook.result.name)\r\n    organisationService.createOrganisationServices(hook.result)\r\n    return hook\r\n  })\r\n}\r\n\r\nexport function removeOrganisationServices (hook) {\r\n  let app = hook.app\r\n  let databaseService = app.getService('databases')\r\n\r\n  // Then we remove the organisation DB\r\n  return databaseService.remove(hook.result._id.toString(), {\r\n    user: hook.params.user\r\n  })\r\n  .then(db => {\r\n    debug('DB removed for organisation ' + hook.result.name)\r\n    return hook\r\n  })\r\n}\r\n\r\nexport function createOrganisationAuthorisations (hook) {\r\n  let app = hook.app\r\n  let authorisationService = app.getService('authorisations')\r\n  let userService = app.getService('users')\r\n\r\n  // Set membership for the owner\r\n  return authorisationService.create({\r\n    scope: 'organisations',\r\n    permissions: 'owner' // Owner by default\r\n  }, {\r\n    user: hook.params.user,\r\n    // Because we already have subject/resource set it as objects to avoid populating\r\n    subjects: [hook.params.user],\r\n    subjectsService: userService,\r\n    resource: hook.result,\r\n    resourcesService: hook.service\r\n  })\r\n  .then(authorisation => {\r\n    debug('Organisation ownership set for user ' + hook.result._id)\r\n    return hook\r\n  })\r\n}\r\n\r\nexport function removeOrganisationAuthorisations (hook) {\r\n  let app = hook.app\r\n  let authorisationService = app.getService('authorisations')\r\n\r\n  // Unset membership for the all org users\r\n  return authorisationService.remove(hook.result._id.toString(), {\r\n    query: {\r\n      subjectsService: hook.result._id.toString() + '/users',\r\n      scope: 'organisations'\r\n    },\r\n    user: hook.params.user\r\n  })\r\n  .then(authorisation => {\r\n    debug('Authorisations unset for organisation ' + hook.result._id)\r\n    return hook\r\n  })\r\n}\r\n\r\nexport function createPrivateOrganisation (hook) {\r\n  let app = hook.app\r\n  let organisationService = app.getService('organisations')\r\n\r\n  // Create a private organisation for the user\r\n  return organisationService.create({\r\n    _id: hook.result._id, // Same ID as user, fine because in another service\r\n    name: hook.result.name // Same name as user\r\n  }, {\r\n    user: hook.result\r\n  })\r\n  .then(org => {\r\n    debug('Private organisation created for user ' + hook.result._id)\r\n  })\r\n}\r\n\r\nexport function removePrivateOrganisation (hook) {\r\n  let app = hook.app\r\n  let organisationService = app.getService('organisations')\r\n  // Create a private organisation for the user\r\n  return organisationService.remove(hook.result._id.toString(), {\r\n    user: hook.result\r\n  })\r\n  .then(org => {\r\n    debug('Private organisation removed for user ' + hook.result._id)\r\n  })\r\n}\r\n"]}