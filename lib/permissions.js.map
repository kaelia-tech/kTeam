{"version":3,"sources":["../src/permissions.js"],"names":["defineResourceRules","defineAnonymousAbilitiesForSubject","defineUserAbilitiesForSubject","defineOrganisationAbilitiesForSubject","defineGroupAbilitiesForSubject","defineAbilitiesForSubject","hasAbilities","addAlias","Roles","member","manager","owner","hooks","RESOURCE_TYPE","subject","resource","resourceService","can","role","permissions","_id","toString","cannot","organisations","forEach","organisation","groups","group","extract","rules","hook","subjectName","Symbol","for","registerHook","includes","push","unregisterHook","filter","registeredHook","abilities","action","serviceName","result"],"mappings":"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","file":"permissions.js","sourcesContent":["import { Ability, AbilityBuilder } from 'casl'\r\n\r\n// Define some alias to simplify ability definitions\r\nAbility.addAlias('update', 'patch')\r\nAbility.addAlias('read', ['get', 'find'])\r\nAbility.addAlias('remove', 'delete')\r\n\r\nexport const Roles = {\r\n  member: 0,\r\n  manager: 1,\r\n  owner: 2\r\n}\r\n\r\n// Hooks that can be added to customize abilities computation\r\nlet hooks = []\r\n\r\n// Get the unique global symbol to store resource type on a resource object\r\nexport const RESOURCE_TYPE = 'type'\r\n\r\nexport function defineResourceRules (subject, resource, resourceService, can) {\r\n  const role = Roles[resource.permissions]\r\n\r\n  if (role >= Roles.member) {\r\n    can('read', resourceService, { _id: resource._id.toString() })\r\n  }\r\n  if (role >= Roles.manager) {\r\n    can('update', resourceService, { _id: resource._id.toString() })\r\n    can('manage', 'authorisations', { resource: resource._id.toString() })\r\n  }\r\n  if (role >= Roles.owner) {\r\n    can('remove', resourceService, { _id: resource._id.toString() })\r\n  }\r\n}\r\n\r\n// Hook computing anonymous abilities for a given user\r\nexport function defineAnonymousAbilitiesForSubject (subject, can, cannot) {\r\n  // Register\r\n  can('create', 'users')\r\n}\r\n\r\n// Hook computing default abilities for a given user\r\nexport function defineUserAbilitiesForSubject (subject, can, cannot) {\r\n  if (subject) {\r\n    // Read/Update profile\r\n    can(['update', 'remove'], 'users', { _id: subject._id.toString() })\r\n    // Create new organisations and associated DB\r\n    can('create', 'organisations')\r\n  }\r\n}\r\n\r\n// Hook computing organisation abilities for a given user\r\nexport function defineOrganisationAbilitiesForSubject (subject, can, cannot) {\r\n  if (subject && subject.organisations) {\r\n    subject.organisations.forEach(organisation => {\r\n      // Generic rules for resources\r\n      defineResourceRules(subject, organisation, 'organisations', can)\r\n      // Specific rules for organiations\r\n      const role = Roles[organisation.permissions]\r\n      if (role >= Roles.manager) {\r\n        can('create', 'groups', { organisation: organisation._id.toString() })\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\n// Hook computing group abilities for a given user\r\nexport function defineGroupAbilitiesForSubject (subject, can, cannot) {\r\n  if (subject && subject.groups) {\r\n    subject.groups.forEach(group => {\r\n      // Generic rules for resources\r\n      defineResourceRules(subject, group, 'groups', can)\r\n      // Np specific rules for groups\r\n    })\r\n  }\r\n}\r\n\r\n// Compute abilities for a given user\r\nexport function defineAbilitiesForSubject (subject) {\r\n  const { rules, can, cannot } = AbilityBuilder.extract()\r\n\r\n  // Run registered hooks\r\n  hooks.forEach(hook => hook(subject, can, cannot))\r\n\r\n  // CASL cannot infer the object type from the object itself so we need\r\n  // to tell it how he can find the object type, i.e. service name\r\n  return new Ability(rules, { subjectName: resource => {\r\n    if (!resource || typeof resource === 'string') {\r\n      return resource\r\n    }\r\n    return resource[Symbol.for(RESOURCE_TYPE)]\r\n  }})\r\n}\r\n\r\ndefineAbilitiesForSubject.registerHook = function (hook) {\r\n  if (!hooks.includes(hook)) {\r\n    hooks.push(hook)\r\n  }\r\n}\r\n\r\ndefineAbilitiesForSubject.unregisterHook = function (hook) {\r\n  hooks = hooks.filter(registeredHook => registeredHook !== hook)\r\n}\r\n\r\nexport function hasAbilities (abilities, action, resource, serviceName) {\r\n  resource[Symbol.for(RESOURCE_TYPE)] = serviceName\r\n  const result = abilities.can(action, resource)\r\n  // Not required anymore\r\n  delete resource[Symbol.for(RESOURCE_TYPE)]\r\n  return result\r\n}\r\n\r\n// Register all default hooks\r\n// Default rules for unauthenticated users\r\ndefineAbilitiesForSubject.registerHook(defineAnonymousAbilitiesForSubject)\r\n// Default rules for all authenticated users\r\ndefineAbilitiesForSubject.registerHook(defineUserAbilitiesForSubject)\r\n// Then rules for organisations\r\ndefineAbilitiesForSubject.registerHook(defineOrganisationAbilitiesForSubject)\r\n// Then rules for groups\r\ndefineAbilitiesForSubject.registerHook(defineGroupAbilitiesForSubject)\r\n"]}